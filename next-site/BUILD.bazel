load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin")
load("@npm//next:index.bzl", "next")

# Next.js doesn't allow its build output to be written anywhere outside of the
# source directory, so we copy all of the source files over into the bin folder
# and run next on the source there. That way, the output will be written there
# and we can return it as our rule output.

filegroup(
    name = "sources",
    srcs = glob([
        "src/**",
        "public/**",
    ]),
)

filegroup(
    name = "config",
    srcs = [
        "next.config.js",
        "next-env.d.ts",
        "tsconfig.json",
    ],
)

copy_to_bin(
    name = "bin_src",
    srcs = [
        ":config",
        ":sources",
    ],
)

next(
    name = ".next",
    args = ["build $(RULEDIR)"],
    data = [
        ":bin_src",
        "@npm//:node_modules",
    ],
    output_dir = True,
)

filegroup(
    name = "src",
    srcs = [
        ":config",
        ":sources",
    ],
)

next(
    name = "start",
    args = [
        "start ./next-site",
        "--node_options=--preserve-symlinks-main",
    ],
    data = [
        ":.next",
        ":src",
        "//:package.json",
        "@npm//:node_modules",
    ],
    templated_args = ["--bazel_patch_module_resolver"],
)

next(
    name = "dev",
    args = [
        "dev ./next-site",
        "--node_options=--preserve-symlinks-main",
        "--bazel_run_from_execroot",
    ],
    data = [
        ":src",
        "//:package.json",
        "@npm//:node_modules",
    ],
    # Allow live reload with iBazel
    tags = [
        "ibazel_notify_changes",
    ],
    templated_args = ["--bazel_patch_module_resolver"],
)